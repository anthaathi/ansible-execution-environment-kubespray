name: Check for New Releases and Update

on:
  schedule:
    - cron: '0 */2 * * *'  # Run every 2 hours
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get latest release
      id: get_release
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/${{ github.repository }}/releases/latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check for new release
      id: check_release
      run: |
        LATEST_RELEASE=$(echo '${{ steps.get_release.outputs.data }}' | jq -r .tag_name)
        echo "Latest release: $LATEST_RELEASE"
        echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT

    - name: Update requirements.txt
      if: steps.check_release.outputs.latest_release != ''
      run: |
        # Add your logic here to update requirements.txt
        # For example, you might want to download a file from the release and overwrite requirements.txt
        # Or you might want to make some modifications to the existing requirements.txt

    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add requirements.txt
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update requirements.txt for release ${{ steps.check_release.outputs.latest_release }}" && git push)

    - name: Trigger Build and Push workflow
      if: steps.check_release.outputs.latest_release != ''
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: Build and Push Ansible Builder Image
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Wait for Build and Push workflow to complete
      if: steps.check_release.outputs.latest_release != ''
      uses: fountainhead/action-wait-for-check@v1.1.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: build-and-push
        ref: ${{ github.ref }}

    - name: Create tag
      if: steps.check_release.outputs.latest_release != ''
      run: |
        git tag ${{ steps.check_release.outputs.latest_release }}
        git push origin ${{ steps.check_release.outputs.latest_release }}
